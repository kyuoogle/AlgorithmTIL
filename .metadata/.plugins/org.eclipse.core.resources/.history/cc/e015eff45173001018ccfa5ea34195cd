package stack;

import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.Deque;
import java.util.ArrayDeque;

class Solution {
    static char[] front = { '(', '[', '{', '<' };
    static char[] rear  = { ')', ']', '}', '>' };

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();

        for (int tc = 1; tc <= 10; tc++) {
            int length = Integer.parseInt(br.readLine());
            String line = br.readLine();

            sb.append("#").append(tc).append(" ")
              .append(validBracket(length, line) ? "1" : "0")
              .append("\n");
        }

        System.out.println(sb);
    }

    private static boolean validBracket(int len, String text) {
        Deque<Character> bracket = new ArrayDeque<>();
        boolean isFront;

        for (int i = 0; i < len; i++) {
            char ch = text.charAt(i);
            isFront = true;

            for (int j = 0; j < 4; j++) {
                if (ch == rear[j]) {
                    if (bracket.isEmpty() || bracket.peek() != front[j]) {
                        return false;
                    } else {
                        bracket.pop();
                        isFront = false;
                    }
                    break;
                }
            }

            if (isFront) {
                bracket.push(ch);
            }
        }

        return bracket.isEmpty();
    }
}
